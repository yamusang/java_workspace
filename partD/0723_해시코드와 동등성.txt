## 객체의 주요 개념

1. 동일성 (Identity)

[개념 ]
동일성은 두 객체가 메모리상에서 같은 위치를 참조하는지 확인하는 것
객체의 **참조(reference)**가 같은지 비교
Java에서는 == 연산자로 확인

[특징]
메모리 주소 비교
같은 객체 인스턴스인지 확인
객체의 내용이 같아도 다른 인스턴스면 False

2. 동등성 (Equality)
[개념]
동등성은 두 객체의 값이나 상태가 같은지 확인하는 것
객체의 **내용(content)**이 같은지 비교
Java에서는 equals() 메서드로 확인

[특징]
값 비교
객체의 논리적 상태가 같은지 확인
다른 인스턴스여도 내용이 같으면 True


3. 해시코드란?

해시코드는 자바 객체를 식별하기 위한 정수값으로, 
객체의 메모리 주소나 객체의 내용을 기반으로 생성되는 고유한 식별자입니다. 
(참고 : Member 클래스 객체의 id,name,point 값을 입력으로 해시코드 생성)
모든 자바 객체는 `Object.hashCode()` 메서드를 통해 해시코드를 가집니다.

[hashCode() 메서드의 특징]

:기본 규칙
- **일관성**: 같은 객체에 대해 여러 번 호출해도 동일한 값을 반환해야 함
	한번 만들어진 해시코드 값은 변경되지 않는다.
- **equals와의 관계**: `equals()`가 true를 반환하는 두 객체는 반드시 같은 해시코드를 가져야 함
- **역관계는 성립하지 않음**: 해시코드가 같다고 해서 반드시 `equals()`가 true인 것은 아님

:hashCode() 오버라이딩
왜 오버라이딩해야 하는가?
- HashSet, HashMap 등의 해시 기반 컬렉션에서 객체를 올바르게 식별하기 위함
- `equals()`를 오버라이딩했다면 반드시 `hashCode()`도 함께 오버라이딩해야 함


4. 불변 객체
예시 : String 클래스, List.of(), 
(Immutable Object)
[개념]
불변 객체는 생성 후 상태를 변경할 수 없는 객체
객체의 필드 값을 수정할 수 없음
수정이 필요한 경우 새로운 객체를 생성

[특징]
Thread-safe (스레드 안전성) : 웹프레임웍 등등 멀티스레드 지원.
부작용(side effect) 방지
예측 가능한 동작
메모리 효율성 (캐싱 가능) : 메모리 사용량=시마다 새 객체 생성

[장점]
안전성: 예상치 못한 변경 방지
단순성: 상태 변화를 고려할 필요 없음
캐싱: 해시코드 미리 계산 가능
공유: 여러 곳에서 안전하게 참조 가능

[단점]
메모리 사용량: 변경 시마다 새 객체 생성
성능: 빈번한 변경 시 오버헤드
복잡성: 깊은 복사 등 구현 복잡도

*개발에 적용 : 클래스를 불변객체로 정의하고 싶다면
1. 클래스를 final로 선언, -상속 못함.
2. 모든 필드를 private final로 선언 - 값을 변경
3. 커스텀 생성자 필요 - 객체 생성하면서 초기값 필요
4. setter 정의 안함 - 변경 못하도록 함
5. hashcode와 equals 재정의 - 동등성 구현.(불변객체 생성의 필수는 아님!!)
