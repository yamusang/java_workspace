자바 함수형 인터페이스
객관식 문제 (5문제)
1. 다음 중 자바 8에서 제공하는 기본 함수형 인터페이스가 아닌 것은?
Function<T, R>
Predicate
Consumer
BiSupplier
Supplier
2. 다음 코드의 실행 결과는?
List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
names.stream()   // List 를 Stream 타입으로 변경하기
     .filter(name -> name.length() > 3)
     .forEach(s -> System.out.println(s));//forEach 메소드 인자는 Consumer 구현 객체
// 수업시간에 안해본 stream 메소드 입니다. 테스트 해보세요.     
Alice, Bob, Charlie
Alice, Charlie
Bob
Charlie
컴파일 에러
3. Function<T, R> 인터페이스의 추상 메서드는?
test(T t)
apply(T t)
accept(T t)
get()
compare(T o1, T o2)   참고:래퍼클래스에 있는 메소드.
4. 다음 코드에서 빈 칸에 들어갈 수 있는 것은?
______<Integer> mod11 = () -> 11 % 2;
Integer result = mod11.get();
Function
Consumer
Supplier
Predicate
Comparator
5. 함수형 인터페이스에 대한 설명으로 옳지 않은 것은?
람다 표현식으로 더 간결하게 표현할 수 있다
추상메소드가 하나이고 default 메소드는 가질 수 없다.
익명 클래스 형식으로 객체를 생성할 수 있다.
추상 메소드가 2개 일때 @FunctionalInterface 를 표시하면 오류가 발생한다. //참고 @FunctionalInterface 애노테이션은 함수형 인터페이스를 알리는 주석
메소드의 인자로 함수형 인터페이스 구현 객체를 사용할 수 있다.
빈칸 문제 (3문제)
1. 다음 코드의 빈칸을 채우세요.
Supplier<String> supplier = () -> "Hello World";
Consumer<String> consumer = s -> System.out.println(s);

String message = supplier._______();
consumer._______(message);
답: _______, _______

2. 다음 코드의 빈칸을 채우세요.
Function<String, __________> stringLength = (x) -> x.length();
int length = stringLength.__________("Java");
답: _______, _______

3. 다음 함수형 인터페이스를 람다식으로 바꾸고 내용을 설명하세요.
Predicate<String> f5 = new Predicate<String>() {
      @Override
      public boolean test(String t) {
        return t.length() < 10;
      }
};
System.out.println(f5.test("abc**1234"));
답: ________________


1. 2 틀림. 4
2.5 틀림 2
3.3 틀림 2
4.2 틀림 3
5.2
빈칸
1.accept 틀림 get
get 틀림 accept
2.int 틀림 Integer
length 틀림 apply
3.Predicate<String> f5 =test->system.out.println(f5.test("abc**1234)); 틀림f5=(t)->t.length()<10